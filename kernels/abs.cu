#include "../include/cusp/abs.cuh"

namespace cusp {

// **in? cuda forums say this is bad practice
template <typename T> __global__ void kernel_abs(const T *in, T *out, int N) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;

  if (i < N) {
    // abs() vs fabs() vs fabsf()?
    out[i] = (T)fabsf(float(in[i]));
  }
}

// this code should be autogenerated by the modtool
template <typename T> void get_block_and_grid(int* minGrid, int* minBlock) {
    cudaOccupancyMaxPotentialBlockSize(minGrid, minBlock, kernel_abs<T>, 0, 0);
}

template <typename T>
void launch_kernel_abs(const T *in, T *out, int grid_size, int block_size,
                        int N, cudaStream_t stream = 0) {

  if (stream) {
    kernel_abs<<<grid_size, block_size, 0, stream>>>(in, out, N);
  } else {
    kernel_abs<<<grid_size, block_size>>>(in, out, N);
  }
}

#define IMPLEMENT_KERNEL(T)                                                   \
  template void launch_kernel_abs(const T *in, T *out, int grid_size,         \
                                   int block_size, int N,                     \
                                   cudaStream_t stream);                      \ 
  template void get_block_and_grid<T>(int* minGrid, int* minBlock);

IMPLEMENT_KERNEL(uint8_t)
IMPLEMENT_KERNEL(uint16_t)
IMPLEMENT_KERNEL(uint32_t)
IMPLEMENT_KERNEL(uint64_t)
IMPLEMENT_KERNEL(short)
IMPLEMENT_KERNEL(int)
IMPLEMENT_KERNEL(float)

} // namespace cusp

