#include "../include/cusp/nlog10.cuh"

namespace cusp {

// **in? cuda forums say this is bad practice
template <typename T> __global__ void kernel_nlog10(const T *in, T *out, float n, float k, int N) {
  int i = blockIdx.x * blockDim.x + threadIdx.x;

  if (i < N) {
    out[i] = (T)(n * log10(in[i]) + k);
  }
}

// this code should be autogenerated by the modtool
template <typename T> void get_block_and_grid(int* minGrid, int* minBlock) {
    cudaOccupancyMaxPotentialBlockSize(minGrid, minBlock, kernel_nlog10<T>, 0, 0);
}

template <typename T>
void launch_kernel_nlog10(const T *in, T *out, float n, float k, int grid_size,
                          int block_size, int N, cudaStream_t stream = 0) {

  if (stream) {
    kernel_nlog10<<<grid_size, block_size, 0, stream>>>(in, out, n, k, N);
  } else {
    kernel_nlog10<<<grid_size, block_size>>>(in, out, n, k, N);
  }
}

#define IMPLEMENT_KERNEL(T)                                                   \
  template void launch_kernel_nlog10(const T *in, T *out, float n, float k,   \
                                     int grid_size,int block_size, int N,     \
                                     cudaStream_t stream);                    \ 
  template void get_block_and_grid<T>(int* minGrid, int* minBlock);

// support complex types? maybe idk
IMPLEMENT_KERNEL(uint8_t)
IMPLEMENT_KERNEL(uint16_t)
IMPLEMENT_KERNEL(uint32_t)
IMPLEMENT_KERNEL(uint64_t)
IMPLEMENT_KERNEL(short)
IMPLEMENT_KERNEL(int)
IMPLEMENT_KERNEL(float)

} // namespace cusp

